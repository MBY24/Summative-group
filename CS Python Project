# 5554920, raghad


def __init__(self):
        self.size = 100
        self.players = {}  
        self.snakes = {}   
        self.ladders = {}  


def move_player(self, movements):
    
        player_now = self.players[self.player_now]
        position_now = player_now[1]
        updated_position = position_now + movements
        
        if updated_position > self.end:
            updated_position = self.end
            
        if updated_position in self.snakes:
            print(f"{player_now[0]} landed on a snake!")
            updated_position = self.snakes[updated_position] 
            
        elif updated_position in self.ladders:
            print(f"{player_now[0]} landed on a ladder!")
            updated_position = self.ladders[updated_position] 
            
        if updated_position > self.end:
            updated_position = self.end  
            
        player_now[1] = updated_position
        self.player_now = (self.player_now + 1) % len(self.players)
        self.display_board()
        
        if updated_position == self.end:   
            winner = player_now[0]
            print(f"{winner} wins!")


def players_user_generator(self):
        num_of_players = int(input("Enter the number of players of the Snakes and Ladders game: "))
        for i in range(1, num_of_players + 1):
            player_name = input("Enter name of player " + str(i) + " : ")
            self.players["Player" + str(i)] = 0       
# 5554920, raghad



#5518326 Field yang
# MY PART :set up board size!
#Pass master,rows,cols,start,end.
class SnakesAndLaddersGUI:
    def __init__(self, master, rows, cols, start, end):
        self.master = master
        self.rows = rows
        self.cols = cols
        self.start = start
        self.end = end
        self.board = self.create_board()
        self.display_board()
        self.diceimage()
#Generating a game board
    def create_board(self):
        board = []
        for i in range(self.rows):
            row = []
            for j in range(self.cols):
                position = i * self.cols + j + 1
                row.append(str(position))
            if i % 2 == 1:#An odd number reverses the order of the row
                row = row[::-1]  
            board.extend(row)
        return board
#Displays the game board in the Tkinter window
    def display_board(self):
        for i in range(self.rows):
            for j in range(self.cols):
                position = (self.rows - i - 1) * self.cols + j + 1
                label_text = self.board[position - 1]
                if position == self.start:
                    label_text = "Start"
                elif position == self.end:
                    label_text = "End"
                label = tk.Label(self.master, text=label_text, relief=tk.RIDGE, width=8, height=3)
                label.grid(row=i, column=j)

#2290275, MOHAMED ALZAABI 
    def diceimage(self):
        # Create a frame for dice and roll button
        dice_frame = Frame(self.master)
        dice_frame.grid(row=self.rows + 1, column=0, columnspan=self.cols, padx=10, pady=10)

        # Create dice labels
        self.dice_label1 = Label(dice_frame, text='', font=('Arial', 100, 'bold'))
        self.dice_label1.grid(row=0, column=0, padx=5)

        self.dice_label2 = Label(dice_frame, text='', font=('Arial', 100, 'bold'))
        self.dice_label2.grid(row=0, column=1, padx=5)

        # Create roll button
        self.roll_button = Button(dice_frame, text="Roll Dice", command=self.roll_dice)
        self.roll_button.grid(row=1, column=0, columnspan=2, pady=10)

    def roll_dice(self):
        game_dice = ['\u2680', '\u2681', '\u2682', '\u2683', '\u2684', '\u2685']
        dice1 = random.choice(game_dice)
        dice2 = random.choice(game_dice)
        Dice1number = self.get_number(dice1)
        Dice2number = self.get_number(dice2)
        self.dice_label1.config(text=dice1)
        self.dice_label2.config(text=dice2)
        sub_dicelabel1 = Label(self.master, text="YOU ROLLED A : " + str(Dice1number + Dice2number))
        sub_dicelabel1.grid(row=self.rows, column=0, columnspan=self.cols, pady=10)

    def get_number(self, x):
        if x == '\u2680':
            return 1
        elif x == '\u2681':
            return 2
        elif x == '\u2682':
            return 3
        elif x == '\u2683':
            return 4
        elif x == '\u2684':
            return 5
        elif x == '\u2685':
            return 6

#2290275, MOHAMED ALZAABI 


##Defines the number of rows, columns, start point, and end point of the game board
def main():
    rows = 10
    cols = 10
    start = 1
    end = 91

    root = tk.Tk()
    root.title("Snakes and Ladders")
#2290275, MOHAMED ALZAABI - setting the size of the screen for tkinter GUI
    root.geometry("650x800")
#2290275, MOHAMED ALZAABI 
    game_board = SnakesAndLaddersGUI(root, rows, cols, start, end)
    root.mainloop()

if __name__ == "__main__":
    main()



#Hussain's lovely code

import random

#helper function
#makes sure the ladder or snake that's been added is new and not identical to a previous one

def new_ladder_or_snake(ladders_snakes_list, current_ladder_snake):
    for i in range(len(ladders_snakes_list)):
        if(ladders_snakes_list[i] == current_ladder_snake):
            return False

    return True

def add_snakes_and_ladders(array, num_ladders, num_snakes):

    length = len(array[0]) * len(array)

    ladders_list = []

    snakes_list = []

#generating ladders:

    for i in range(num_ladders):
        #will generate a ladder with two different starting and ending index

        while True:

            edge1 = random.randint(1,length)
            edge2 = random.randint(1,length)

            if(edge1 < edge2):
                temp_list = [edge1, edge2]
                if( (i==0) or new_ladder_or_snake(ladders_list, temp_list)):
                    ladders_list.append(temp_list)
                    break

            elif(edge2 < edge1):
                temp_list = [edge2, edge1]
                if ((i == 0) or new_ladder_or_snake(ladders_list, temp_list)):
                    ladders_list.append(temp_list)
                    break

# generating snakes, basically same concept

    for i in range(num_snakes):
        # will generate a ladder with two different starting and ending index

        while True:

            edge1 = random.randint(1, length)
            edge2 = random.randint(1, length)

            if (edge1 < edge2):
                temp_list = [edge1, edge2]
                if ((i == 0) or new_ladder_or_snake(ladders_list, temp_list)):
                    snakes_list.append(temp_list)
                    break

            elif (edge2 < edge1):
                temp_list = [edge2, edge1]
                if ((i == 0) or new_ladder_or_snake(ladders_list, temp_list)):
                    snakes_list.append(temp_list)
                    break

    compound_list = [ladders_list, snakes_list]
    return compound_list

"""

The function return a 2 item list, the first item being a 2d list of ladders of the grid
each list in the ladders list has the starting index for the ladder at the first item, and the ending 
index of of the ladder as the second item, and same things for the second item in the compound list which 
has all of the information of the snakes
"""





















