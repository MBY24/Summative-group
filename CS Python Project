import tkinter as tk
# raghad 5554920
from tkinter import Frame, Label, Button
# raghad 5554920
import random


#5518326 Field yang
# MY PART :set up board size!
#Pass master,rows,cols,start,end.
class SnakesAndLaddersGUI:
    def __init__(self, master, rows, cols, start, end):
        self.master = master
        self.rows = rows
        self.cols = cols
        self.start = start
        self.end = end
        # raghad
        self.players = []  
        self.player_now = 0  
        # raghad
        self.board = self.create_board()
        self.display_board()
        self.diceimage()
        self.snakes = {16: 6, 47: 26, 49: 11, 56: 53, 62: 19, 64: 60, 87: 24, 93: 73, 95: 75, 98: 78}  
        self.ladders = {1: 38, 4: 14, 9: 31, 21: 42, 28: 84, 36: 44, 51: 67, 71: 91, 80: 100}  

    #Generating a game board    
    def create_board(self):
        board = []
        for i in range(self.rows):
            row = []
            for j in range(self.cols):
                position = i * self.cols + j + 1
                row.append(str(position))
            if i % 2 == 1:
                row = row[::-1]  
            board.extend(row)
        return board

    
    #Displays the game board in the Tkinter window
    def display_board(self):
        
        for i in range(self.rows):
            for j in range(self.cols):
                position = (self.rows - i - 1) * self.cols + j + 1
                label_text = self.board[position - 1]
                if position == self.start:
                    label_text = "Start"
                elif position == self.end:
                    label_text = "End"
                    
                # raghad 5554920   
                # iteration through players names and check which of them matches the specified position and then display their names 
                # as labeled text 
                name_of_players = []
                for player in self.players:
                    if player[1] == position:
                        name_of_players.append(player[0])
                if name_of_players:
                    label_text += "\n"
                    for name in name_of_players:
                        label_text += "\n" + name                                
                # raghad 5554920
                
                label = tk.Label(self.master, text=label_text, relief=tk.RIDGE, width=8, height=3)
                label.grid(row=i, column=j)

                
    #2290275, MOHAMED ALZAABI            
    def diceimage(self):
        # Create a frame for dice and roll button
        dice_frame = Frame(self.master)
        dice_frame.grid(row=self.rows + 1, column=0, columnspan=self.cols, padx=10, pady=10)

        # Create dice labels
        self.dice_label1 = Label(dice_frame, text='', font=('Arial', 100, 'bold'))
        self.dice_label1.grid(row=0, column=0, padx=5)

        self.dice_label2 = Label(dice_frame, text='', font=('Arial', 100, 'bold'))
        self.dice_label2.grid(row=0, column=1, padx=5)

        # Create roll button
        self.roll_button = Button(dice_frame, text="Roll Dice", command=self.roll_dice)
        self.roll_button.grid(row=1, column=0, columnspan=2, pady=10)
        
                         
    def roll_dice(self):
        game_dice = ['\u2680', '\u2681', '\u2682', '\u2683', '\u2684', '\u2685']
        dice1 = random.choice(game_dice)
        dice2 = random.choice(game_dice)
        Dice1number = self.get_number(dice1)
        Dice2number = self.get_number(dice2)
        self.dice_label1.config(text=dice1)
        self.dice_label2.config(text=dice2)
        sub_dicelabel1 = Label(self.master, text="YOU ROLLED A : " + str(Dice1number + Dice2number))
        sub_dicelabel1.grid(row=self.rows, column=0, columnspan=self.cols, pady=10)
        
        # raghad 5554920
        # moving players based on the sum of the two dice
        self.move_player(Dice1number + Dice2number)
        # raghad 5554920

    def get_number(self, x):
        if x == '\u2680':
            return 1
        elif x == '\u2681':
            return 2
        elif x == '\u2682':
            return 3
        elif x == '\u2683':
            return 4
        elif x == '\u2684':
            return 5
        elif x == '\u2685':
            return 6

    #2290275, MOHAMED ALZAABI
    
        
    # raghad 5554920
    def move_player(self, movements: int) -> None:
        
        """
        Move players based on the number of movements occur in the dices 
        
        Args:
            movements (int): Number of steps that a player will move

        Returns:
            None
        """
        
        player_now = self.players[self.player_now]
        position_now = player_now[1]
        updated_position = position_now + movements
        
        # Checking that the updated position is not higher than the end position
        if updated_position > self.end:
            updated_position = self.end
        # Is the updated position a Snake head?    
        if updated_position in self.snakes:
            print(f"{player_now[0]} lands on snake head!")
            updated_position = self.snakes[updated_position] 
        # Is the updated position a Ladder bottom?    
        elif updated_position in self.ladders:
            print(f"{player_now[0]} landed on the bottom of ladder!")
            updated_position = self.ladders[updated_position] 
        # Checking again that the updated position is not higher than the end position if the player lands on a snake or ladder   
        if updated_position > self.end:
            updated_position = self.end    
        player_now[1] = updated_position
        # Changing to the next player turn  
        self.player_now = (self.player_now + 1) % len(self.players)
        # Calling the function to update players new position and display it
        self.display_board()
        # Checking for winning condition when a player reaches the end position
        if updated_position == self.end:
            winner = player_now[0]
            print(f"{winner} is the winner!")
            # If the one of the players reaches the end position the botton of the rolling the dice will be disables and the game stops
            self.roll_button.config(state=tk.DISABLED)     
    # raghad 5554920        

    
    # raghad 5554920
    def players_generator(self):
        
        """ 
        
        Generate players based on what the user input to know the number and name of players 
        
        Return: None 
        
        """
        while True:
            try:
                # Getting number of players user wants
                tot_players = int(input("Type number of players you want in the game: "))
                # Checking the entered number of players is positive 
                if tot_players <= 0:
                    print("Number of players should be positive!")
                    continue
                break
                
            except ValueError:  
                # Error handling if the user entered Invalid data type 
                print("Invalid, plug an INTEGER only!")
        # Itration to get the name for each player based on the number inputed priviously        
        for i in range(tot_players):
            while True:
                name_of_player = input(f"Player name {i+1}: ")
                # Another Error handling for names if user inputed nothing
                if name_of_player:
                    # If it is a valid name the player name and starting position will be added to players list!
                    self.players.append([name_of_player, self.start])
                    break
                else:
                    print("Enter a valid Name!")
        # raghad 5554920            
                    

def main():
    
    #Defines the number of rows, columns, start point, and end point of the game board
    rows = 10
    cols = 10
    start = 1
    end = 91

    root = tk.Tk()
    root.title("Snakes and Ladders")
    
    #2290275, MOHAMED ALZAABI - setting the size of the screen for tkinter GUI
    root.geometry("650x800")
    #2290275, MOHAMED ALZAABI

    game_board = SnakesAndLaddersGUI(root, rows, cols, start, end)
    
    # raghad 5554920
    game_board.players_generator() 
    # raghad 5554920
    
    root.mainloop()

if __name__ == "__main__":
    main()


     

        



----------------------------------------------------------------------------------------------------------------------------------------

#Hussain's lovely code

import random

#helper function
#makes sure the ladder or snake that's been added is new and not identical to a previous one

def new_ladder_or_snake(ladders_snakes_list, current_ladder_snake):
    for i in range(len(ladders_snakes_list)):
        if(ladders_snakes_list[i] == current_ladder_snake):
            return False

    return True

def add_snakes_and_ladders(array, num_ladders, num_snakes):

    length = len(array[0]) * len(array)

    ladders_list = []

    snakes_list = []

#generating ladders:

    for i in range(num_ladders):
        #will generate a ladder with two different starting and ending index

        while True:

            edge1 = random.randint(1,length)
            edge2 = random.randint(1,length)

            if(edge1 < edge2):
                temp_list = [edge1, edge2]
                if( (i==0) or new_ladder_or_snake(ladders_list, temp_list)):
                    ladders_list.append(temp_list)
                    break

            elif(edge2 < edge1):
                temp_list = [edge2, edge1]
                if ((i == 0) or new_ladder_or_snake(ladders_list, temp_list)):
                    ladders_list.append(temp_list)
                    break

# generating snakes, basically same concept

    for i in range(num_snakes):
        # will generate a ladder with two different starting and ending index

        while True:

            edge1 = random.randint(1, length)
            edge2 = random.randint(1, length)

            if (edge1 < edge2):
                temp_list = [edge1, edge2]
                if ((i == 0) or new_ladder_or_snake(ladders_list, temp_list)):
                    snakes_list.append(temp_list)
                    break

            elif (edge2 < edge1):
                temp_list = [edge2, edge1]
                if ((i == 0) or new_ladder_or_snake(ladders_list, temp_list)):
                    snakes_list.append(temp_list)
                    break

    compound_list = [ladders_list, snakes_list]
    return compound_list

"""

The function return a 2 item list, the first item being a 2d list of ladders of the grid
each list in the ladders list has the starting index for the ladder at the first item, and the ending 
index of of the ladder as the second item, and same things for the second item in the compound list which 
has all of the information of the snakes
"""
