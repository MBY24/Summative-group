#Hussain's lovely code: 

class Member:
    
    def __init__(self, name, age, location):
        self.name = name
        self.age = age
        self.location = location
        self.friends = []

    def add_relationship(self, member):
        if member not in self.friends:
            self.add_friend(member)
            member.add_friend(self)

    def add_friend(self, member):
        self.friends.append(member)

    def find_friends(self):
        return [friend.name for friend in self.friends]

     # finding the shortest path using the breadth-first search (BFS) algorithm
    def shortest_path(self, end):
        queue = [(self, 0)] 
        visited = []  

        while queue:
            current, distance = queue.pop(0) 
        
            if current == end:
                return distance 
        
            if current not in visited:  
                visited.append(current)  
            
                for friend in current.friends:
                    queue.append((friend, distance + 1))  
    
        return None  


# Example Usage:

# create members
alice = Member("Alice", 25, "New York")
bob = Member("Bob", 30, "Los Angeles")
charlie = Member("Charlie", 35, "Saudi Arabia")
david = Member("David", 40, "US")

# Add relationships
alice.add_relationship(bob)
bob.add_relationship(charlie)
charlie.add_relationship(david)

# Find all the friends of Alice
alice_friends = alice.find_friends()
print("Alice friends:", alice_friends) 

# Find the shortest path between Alice and David
shortest_path = alice.shortest_path(david)
print("Shortest path between Alice and David:", shortest_path)
